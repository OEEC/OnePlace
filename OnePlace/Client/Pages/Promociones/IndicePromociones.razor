@page "/indice-promociones"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Administrador")]
@using System.Security.Claims

<Card Class="card mb-3">
    <CardHeader Class="card-header bg-light">
        <div class="row justify-content-between align-items-center">
            <div class="col-sm-auto">
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Texto Typo="Typo.h5" Class="mb-0">Promociones</Texto>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Enlace Class="btn btn-outline-primary btn-sm" Href="crear-promocion"><Icono Icon="fas fa-plus" data-fa-transform="shrink-3 down-2"></Icono><Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Crear</Texto></Enlace>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <BlazoredTypeahead SearchMethod="BuscarPromocion"
                                           Context="promo"
                                           TValue="Promocion"
                                           TItem="Promocion"
                                           ValueExpression="@(()=> PromocionSeleccionada)"
                                           Value="@PromocionSeleccionada"
                                           ValueChanged="@((Promocion item) => CargarPromocionFiltro(item))"
                                           placeholder="Buscar Promoción">
                            <SelectedTemplate>
                                @promo.Nombre
                            </SelectedTemplate>
                            <ResultTemplate>
                                @promo.Nombre
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Lo sentimos, no hay estados con esos datos.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <div class="custom-control custom-switch">
                            <input class="custom-control-input" id="customSwitch1" type="checkbox" @onchange="e => CheckChanged(e)" checked="@Activo">
                            <label class="custom-control-label" for="customSwitch1">Inactivas</label>
                        </div>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-dark btn-sm" @onclick="Cargar">
                            <Icono Icon="oi oi-magnifying-glass" data-fa-transform="shrink-3 down-2" />
                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Filtrar</Texto>
                        </Boton>
                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-danger btn-sm" @onclick="LimpiarOnClick">
                            <Icono Icon="oi oi-reload" data-fa-transform="shrink-3 down-2" />
                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Limpiar</Texto>
                        </Boton>
                    </div>
                </div>
            </div>
        </div>
    </CardHeader>
    <CardBody Class="card-body border-top">
        <Tabla Items="ListadePromociones" Context="item">
            <Cabecera>
                <th scope="col">Nombre</th>
                <th scope="col">Tipo</th>
                <th scope="col">Zona</th>
                <th scope="col">Fecha de Vigencia</th>
                <th class="text-end" scope="col">Acciones</th>
            </Cabecera>
            <Filas>
                <td>
                    <Enlace Href="@("detalles-promocion/"+item.PromocionId)">
                        @item.Nombre
                    </Enlace>
                </td>
                <td>
                    @item.TipodePromociones.GetDescription()
                </td>
                <td>
                    @item.Zona.Zona1
                </td>
                <td>
                    @if (item.FechadeTermino != null && FechadeHoy >= item.FechadeTermino)
                    {
                        <span class="text-danger">
                            @item.FechadeTermino.Value.ToString("MM/dd/yyyy")
                        </span>
                    }
                    else
                    {
                        <span class="text-success">
                            @item.FechadeTermino.Value.ToString("MM/dd/yyyy")
                        </span>
                    }
                </td>
                <td>
                    <Enlace Class="btn p-0" Href="@("editar-promocion/" + item.PromocionId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
                        <Icono Icon="text-500 fas fa-edit" />
                    </Enlace>
                    @if (item.Activo == true)
                    {
                        <BotonIcono Class="btn p-0 ms-2" ButtonType="ButtonType.Button" data-bs-toggle="tooltip" data-bs-placement="top" title="Borrar" Icon="text-500 fas fa-trash-alt" @onclick="@(() => Desactivar(item))" />
                    }
                </td>
            </Filas>
        </Tabla>
    </CardBody>
    <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
        <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
    </CardFooter>
</Card>
<br />

@code{

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string
    public List<Promocion> ListadePromociones { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    //incluir mas parametros si se requieren
    string promocionseleccionada = "0";
    private bool Activo = false;
    public DateTime FechadeHoy;

    protected async override Task OnInitializedAsync()
    {
        FechadeHoy = DateTime.Now;
        var authState = await authenticationStateTask;
        user = authState.User;

        var url = navigationManager.Uri;//aqui aplicamos el diccionario de string
        var queries = navigationManager.ObtenerQueryStrings(url);
        //si es la primera vez que el usuario entra esto estaria a nulo
        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);//le pasamos un string vacio
        }
        else
        {
            queryStringsDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
            await RealizarBusqueda(queryStrings);
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar();
    }

    private async Task Cargar()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo("indice-promociones?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    #region Filtrar

    //este metodo me permite llenar los campos del formulario apartir del querystring
    private void LlenarCampos()
    {
        //toma los campos del diccionario y los coloca en los campos correspondientes
        if (queryStringsDict.ContainsKey("promocionid"))
        {
            promocionseleccionada = queryStringsDict["promocionid"];
        }
        if (queryStringsDict.ContainsKey("activo"))
        {
            bool.TryParse(queryStringsDict["activo"], out Activo);
        }
        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Promocion>>("api/Promocion/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        ListadePromociones = httpResponse.Response;
    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["promocionid"] = promocionseleccionada;
        queryStringsDict["activo"] = Activo.ToString();
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        promocionseleccionada = "";
        Activo = false;
        paginaActual = 1;
        await Cargar();
    }

    #endregion

    #region FiltroporPromocion

    private async Task<IEnumerable<Promocion>> BuscarPromocion(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Promocion>>($"api/Promocion/buscar/{searchText}");
        return responseHttp.Response;
    }

    public Promocion PromocionSeleccionada { get; set; }

    private void CargarPromocionFiltro(Promocion item)
    {
        @if (item != null)
        {
            PromocionSeleccionada = item;
            promocionseleccionada = PromocionSeleccionada.PromocionId.ToString();
        }
    }

    #endregion

    #region FiltroActivos

    private void CheckChanged(ChangeEventArgs ev)
    {
        Activo = (Boolean)ev.Value;
    }

    #endregion

    #region BorrarPromocion
    public async Task Desactivar(Promocion promo)
    {
        string mensajeconfirmacion = $"¿Desea borrar esta Promoción: {promo.Nombre}?";
        var confirmado = await JS.Confirm("Confirmar", mensajeconfirmacion, IJSRuntimeExtensionMethods.TipoMensajeSweetAlert.question);
        if (confirmado)
        {
            promo.Activo = false;
            var httpResponse = await repositorio.Put("api/Promocion/Desactivar", promo);
            if (httpResponse.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
            }
            else
            {
                navigationManager.NavigateTo("indice-promociones");
                await Cargar();
            }
        }
    }
    #endregion
}
