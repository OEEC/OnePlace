@page "/editar-capacitacion/{CapacitacionId:int}"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensaje
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Administrador")]

@if (Capacitacion == null)
{
    <text>Cargando...</text>
}
else
{
    <FormularioCapacitacion Capacitacion="Capacitacion" OnValidSubmit="Editar" Es_EditarCapacitacion="true" 
                            Titulo="Editar Capacitación" 
                            ZonasNoSeleccionadas="ZonasNoSeleccionadas"
                            ZonasSeleccionadas="ZonaSeleccionadas"/>
}

@code {
    [Parameter] public int CapacitacionId { get; set; }
    CapacitacionContinua Capacitacion;

    private List<Zona> ZonaSeleccionadas = new List<Zona>();
    private List<Zona> ZonasNoSeleccionadas = new List<Zona>();

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<CapacitacionZonaActualizacionDTO>($"api/Capacitacion/Actualizar/{CapacitacionId}");
        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("indice-capacitacion");
            }
            else
            {
                await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            ZonasNoSeleccionadas = model.ZonasNoSeleccionadas;
            ZonaSeleccionadas = model.ZonasSeleccionadas;
            Capacitacion = model.CapacitacionContinua;            
        }
    }   

    private async Task Editar()
    {
        var httpResponse = await repositorio.Put("api/Capacitacion", Capacitacion);
        if (httpResponse.Error)
        {
            await mostrarMensaje.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo("indice-capacitacion");
        }
    }
}
