@page "/participantes-quiz/{QuizId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@using System.Security.Claims

<Card Class="card mb-3">
    <CardBody Class="card-body border-top">
        <Tabla Items="ListadeActividadUsuariosQuiz" Context="item">
            <Cabecera>
                <th scope="col">Empleado</th>
                <th class="text-end" scope="col">Acciones</th>
                
            </Cabecera>
            <Filas>
                <td>
                    @item.NombreEmpleado
                </td>
                <td>
                    <Enlace Class="btn p-0" Href="@("indice-respuestas/" + Quiz.TemaId + "/" + item.Idempleado)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver respuestas">
                        <Icono Icon="text-500 fas fa-eye" />
                    </Enlace>
                </td>
                
            </Filas>
        </Tabla>
    </CardBody>
    <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
        <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
    </CardFooter>

</Card>



@code {

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public int QuizId { get; set; }
    private Quiz Quiz;

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string



    public List<ActividadUsuarioQuiz> ListadeActividadUsuariosQuiz { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;
        var url = navigationManager.Uri;//aqui aplicamos el diccionario de string


        await CargarQuiz();
        //var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
        var queryStrings = "quizid="+QuizId;
        await RealizarBusqueda(queryStrings);
    }

    private async Task CargarQuiz()
    {
        var responseHttp = await repositorio.Get<Quiz>($"api/Quiz/{QuizId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Quiz = responseHttp.Response;
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar();

    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        /*queryStringsDict["empleadoid"] = eventoseleccionado;
        queryStringsDict["activo"] = Activo.ToString();*/
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }


    private async Task Cargar()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo("indice-eventos?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<ActividadUsuarioQuiz>>("api/ActividadUsuarioQuiz/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        ListadeActividadUsuariosQuiz = httpResponse.Response;
    }
}
