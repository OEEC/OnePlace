@layout CenteredCardLayout
@page "/"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS


<EditForm Model="@userInfoLogin" OnValidSubmit="LoginUsuario">
    <DataAnnotationsValidator />
    <div class="text-center">
        <Texto Typo="Typo.h4" Class="h4 text-gray-900 mb-4">¡Bienvenido!</Texto>
    </div>
    <div class="form-group">
        <InputLabel for="nomempleado" data-toggle="tooltip" data-placement="top" title="Nombre de usuario es compuesto con el # de empleado y las iniciales de la zona perteneciente">Nombre de Usuario:</InputLabel>
        <InputText type="nomempleado" class="form-control form-control-sm" placeholder="Número de Empleado" @bind-Value="@userInfoLogin.NumeroEmpleado" data-toggle="tooltip" data-placement="bottom" title="Nombre de usuario es compuesto con el # de empleado y las iniciales de la zona perteneciente"/>
        <ValidationMessage For="@(() => userInfoLogin.NumeroEmpleado)" />
    </div>
    <div class="form-group">
        <InputLabel for="password">Contraseña:</InputLabel>
        <InputPassword class="form-control form-control-sm" PlaceHolder="Contraseña" @bind-Value="@userInfoLogin.Password" />
        <ValidationMessage For="@(() => userInfoLogin.Password)" />
    </div>
    <Boton ButtonType="ButtonType.Submit" Class="btn btn-dark btn-sm btn-block">
        Inicio de Sesión
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>

        }
    </Boton>
    <Divisor />
</EditForm>

@code {

    private UserInfoLogin userInfoLogin = new UserInfoLogin();
    private bool loading = false;

    private async Task LoginUsuario()
    {
        loading = true;
        var httpResponse = await repositorio.Post<UserInfoLogin, UserToken>("api/Cuentas/Login", userInfoLogin);

        if (httpResponse.Error)
        {
            loading = false;
            await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
        }
        else
        {
            loading = false;
            await loginService.Login(httpResponse.Response.Token);
            navigationManager.NavigateTo("inicio");
        }
    }
}