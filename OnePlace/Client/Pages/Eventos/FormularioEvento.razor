@inject IRepositorio repositorio
@using System.Security.Claims

<EditForm Model="@Evento" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <Card Class="card mb-3">
        <CardHeader Class="card-header">
            <div class="row">
                <div class="col">
                    <Texto Typo="Typo.h5" Class="mb-0">@Titulo</Texto><br>
                </div>
                <div class="col-auto d-none d-sm-block">
                    <input type="date" class="form-control form-control-sm" id="fecha" @bind-value="@Evento.FechaRegistro" disabled />
                </div>
            </div>
        </CardHeader>
        <CardBody Class="card-body border-top">
            <div class="form-row">
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputLabel for="nombreevento">Nombre del Evento</InputLabel>
                        <InputText class="form-control form-control-sm" id="nombreevento" placeholder="Nombre del Evento" @bind-Value="@Evento.NombreEvento" />
                        <ValidationMessage For="@(() => Evento.NombreEvento)" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputLabel for="tituloevento">Título del Evento</InputLabel>
                        <InputText class="form-control form-control-sm" id="tituloevento" placeholder="Título del Evento" @bind-Value="@Evento.TituloEvento" />
                        <ValidationMessage For="@(() => Evento.TituloEvento)" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputLabel for="descripcion">Descripción</InputLabel>
                        <InputTextArea id="descripcion" placeholder="Descripción" type="text" rows="1" class="form-control form-control-sm" @bind-Value="@Evento.DescripcionEvento" />
                        <ValidationMessage For="@(() => Evento.DescripcionEvento)" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputLabel for="fechaevento">Fecha del Evento</InputLabel>
                        <InputDate class="form-control form-control-sm" @bind-Value="@Evento.FechaEvento" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <InputLabel for="tipodeevento">Tipo de Evento</InputLabel>
                        <select class="custom-select custom-select-sm mb-3" @bind="Evento.TipoEventos">
                            @foreach (var item in Enum.GetValues(typeof(TipoEvento)).Cast<TipoEvento>())
                            {
                                <option value="@item">@item.GetDescription()</option>
                            }
                        </select>
                    </div>
                </div>
                @if (Es_EditarEvento == true)
                {
                    <div class="col-sm-3">
                        <div class="form-group">
                            <br />
                            <ToolTip Delay="1000">
                                <ChildContent>
                                    <CasillaVerificacion @bind-Checked="@Evento.Activo" ManejarEstados="true" />
                                </ChildContent>
                                <TooltipContent>
                                    <Texto Typo="Typo.body2">La casilla marcada indica que el registro esta activo</Texto>
                                </TooltipContent>
                            </ToolTip>
                        </div>
                    </div>
                }
                <div class="col-sm-4">
                    <div class="form-group">
                        <InputImg ImagenSeleccionada="ImagenSeleccionada" ImagenURL="@imagenURL" Label="Imagen Principal" />
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        <br />
                        <Boton Class="btn btn-primary btn-sm mr-2" ButtonType="ButtonType.Button" @onclick="MasImagenes"><Icono Icon="fas fa-plus fs--2 mr-1"></Icono>Añadir más Imagenes</Boton>
                    </div>
                </div>

                @if (AñadirMas == true)
                {
                    <div class="form-row col-sm-12" style="border-style: dashed; border-width: 1px; border-color: rgba(136, 204, 255, 0.47);">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <InputLabel for="tituloextra">Título</InputLabel>
                                <InputText class="form-control form-control-sm" id="tituloextra" placeholder="Título" @bind-Value="@Evento.TituloEventoExtra" />
                                <ValidationMessage For="@(() => Evento.TituloEventoExtra)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <InputLabel for="descripcionextra">Descripción</InputLabel>
                                <InputText class="form-control form-control-sm" id="descripcionextra" placeholder="Descripción" @bind-Value="@Evento.DescripcionEventoExtra" />
                                <ValidationMessage For="@(() => Evento.DescripcionEventoExtra)" />
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <InputMultiplesImg ImagenesSeleccionadas="ImagenesSeleccionadas" ImagenesURL="@listadeimagenesURL" Label="Imagenes" />
                            </div>
                        </div>
                    </div>                        
                }                    
            </div>
        </CardBody>
        <CardFooter Class="card-footer border-top text-right bg-transparent">
            <Boton Class="btn btn-secondary btn-sm mr-2" ButtonType="ButtonType.Submit"><Icono Icon="fas fa-check fs--2 mr-1"></Icono>Guardar</Boton>
        </CardFooter>        
    </Card>
</EditForm>
<br />

@code{

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public Evento Evento { get; set; }
    [Parameter] public bool Es_EditarEvento { get; set; }
    [Parameter] public string Titulo { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private string imagenURL;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        if (Es_EditarEvento == false)
        {
            Evento.FechaRegistro = DateTime.Now;
        }
        else
        {
            AñadirMas = true;
        }

        //sino hay imagen no hacemos nada, pero si hay imagen la guardamos en la variable imagenUrl
        if (!string.IsNullOrWhiteSpace(Evento.ImgEvento))
        {
            imagenURL = Evento.ImgEvento;
            Evento.ImgEvento = null;//volvemos null la imagen que ya tenia, si el usuario no cambia la imagen nunca, entonces nunca la enviamos
        }

        if (Evento.Imagenes != null && Evento.Imagenes.Count > 0)
        {
            foreach (var item in Evento.Imagenes)
            {
                //sino hay imagen no hacemos nada, pero si hay imagen la guardamos en la variable imagenUrl
                if (!string.IsNullOrWhiteSpace(item.Imagen))
                {
                    imagenURL2 = item.Imagen;//guardar imagen en la variable
                    listadeimagenesURL.Add(imagenURL2);//esto solo se hace para enviar una lista de imagenes al componente inputmultipleimg
                    item.Imagen = null;//volvemos null la imagen que ya tenia, si el usuario no cambia la imagen nunca, entonces nunca la enviamos
                }
            }
        }
    }

    //este metodo actualiza la imagen con la nueva imagen seleccionada
    private void ImagenSeleccionada(string imagenBase64)
    {
        Evento.ImgEvento = imagenBase64;
        imagenURL = null;
    }

    #region MasInformacion

    public bool AñadirMas = false;

    public void MasImagenes()
    {
        AñadirMas = !AñadirMas;
    }

    public List<ImagenesCarruselEvento> listadeimagenes = new List<ImagenesCarruselEvento>();

    //para editar
    private string imagenURL2;
    public List<string> listadeimagenesURL = new List<string>();

    //este metodo actualiza las imagenes con las nuevas imagenes seleccionadas
    private void ImagenesSeleccionadas(List<string> imagenesBase64)
    {
        //recorremos el listado de string que nos envio el componente
        foreach (var item in imagenesBase64)
        {
            //por cada iteracion creamos un new imagencarrusel, y le asignamos el string a la propiedad imagen del objecto
            ImagenesCarruselEvento imagen = new ImagenesCarruselEvento()
            {
                Imagen = item
            };

            //cada nuevo objecto imagencarrusel lo guardamos en una lista
            listadeimagenes.Add(imagen);
        }

        //la lista llena de objetos imagenescarrusel la igualamos a la lista de imagenes en el objeto carrusel
        Evento.Imagenes = listadeimagenes;

        //hacemos null las propiedades
        imagenURL2 = null;
        listadeimagenesURL = null;
    }

    #endregion
}
