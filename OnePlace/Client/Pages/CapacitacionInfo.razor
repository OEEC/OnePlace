@page "/capacitacioninfoextra"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@*todas las paginas necesitan este atributo para que no se puedan ver sino estas logueado*@
@attribute [Authorize]
@using System.Security.Claims

@if (user.IsInRole("Usuario"))
{
    <div class="container-landingpage bg-white p-0 text-heebo">

        <!-- Navbar & Hero Start -->
        <div class="container-xxl position-relative p-0">
            <nav class="navbar navbar-expand-lg navbar-light px-4 px-lg-5 py-3 py-lg-0">
                <a href="inicio" class="navbar-brand p-0">
                    <!--<h1 class="m-0"><i class="fa fa-search me-2"></i>SEO<span class="fs-5">Master</span></h1> -->
                    <img src="img/oneplace.png" alt="Logo">
                </a>
                <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
                    <span class="fa fa-bars"></span>
                </button>
                <div class="@NavMenuCssClass navbar-collapse" id="navbarCollapse" @onclick="CollapseNavMenu">
                    <div class="navbar-nav ml-auto py-0">
                        @*cambio ocurrido plantilla en boostrap 5 ms-auto blazor boostrap 4 ml-auto*@
                        <a onclick="document.getElementById('inicio').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Inicio</a>
                        <a onclick="document.getElementById('capacitacion').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Capacitación</a>
                        <a onclick="document.getElementById('contacto').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Contacto</a>
                    </div>
                </div>
                <EnlacesLogin ColorDropDown="btn btn-simsasecondary btn-sm ml-2 dropdown-caret-none" />
            </nav>

            <div class="container-xxl py-5 bg-simsa hero-header mb-5" id="inicio">
                <div class="container my-5 py-5 px-lg-5">
                    <div class="row g-5 py-5">
                        <div class="col-lg-6 text-center text-lg-start">
                            <h1 class="text-white mb-4 animated zoomIn">Gracias por ser parte de la familia Simsa</h1>
                            <p class="text-white pb-3 animated zoomIn">Bienvenido a tu Portal Web</p>
                            <a href="inicio" class="btn btn-light py-sm-3 px-sm-5 rounded-pill me-3 animated slideInLeft font-weight-bold">Página Principal</a>
                            <!--<a href="" class="btn btn-outline-light py-sm-3 px-sm-5 rounded-pill animated slideInRight">Contact Us</a> -->
                        </div>
                        <div class="col-lg-6 text-center text-lg-start">
                            <img class="img-fluid animated flipInX" src="img/oneplace2.png" alt="">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Navbar & Hero End -->


        <!--Capacitacion-->

        <div class="container-xxl py-5" id="capacitacion">
            <div class="container px-lg-5">
                <div class="row g-5">
                    <div class="col-lg-12 wow fadeInUp" data-wow-delay="0.1s" data-wow-iteration="1" style="visibility: visible; animation-delay: 0.1s; animation-name: fadeInUp;">
                        <div class="section-title position-relative mb-4 pb-2">
                            <h6 class="position-relative text-primarysimsa pl-4">Capacitación</h6>
                            <h2 class="mt-2">Aprende en todo momento, nunca es tarde!</h2>
                        </div>

                        <Card Class="card mb-3">
                            <CardHeader Class="card-header">
                                <div class="row justify-content-between">
                                    <div class="col-md-auto">
                                        <Texto Typo="Typo.h5" Class="mb-3 mb-md-0">Capacitación Continua</Texto>
                                    </div>                                   
                                </div>
                            </CardHeader>
                            <CardBody Class="card-body p-0">
                                <div class="row bg-200 text-900 no-gutters px-1 fs--1 font-weight-semi-bold">
                                    <div class="col-9 col-md-8 p-2 px-md-3"></div>
                                    <div class="col-3 col-md-4 px-3">
                                        <div class="row">
                                         
                                        </div>
                                    </div>
                                </div>
                                @if (ListadeCapacitaciones == null)
                                {
                                    <LoadingSpinner IsLoading="Procesando" />
                                }
                                else
                                {
                                    @foreach (var item in ListadeCapacitaciones)
                                    {
                                        <div class="row no-gutters align-items-center px-1 border-bottom border-200">
                                            <div class="col-8 py-3 px-2 px-md-3">
                                                <div class="media align-items-center">
                                                    <Enlace><Imagen Class="rounded mr-3 d-none d-md-block" Src="@item.Imagen" alt="" width="60" /></Enlace>
                                                    <div class="media-body">
                                                        <Texto Typo="Typo.h5" Class="fs-0">
                                                            <Enlace Class="text-900" Href="@("detalles-capacitacioninfo/"+item.CapacitacionContinuaId)">@item.Nombre</Enlace>
                                                        </Texto>
                                                        <div class="fs--2 fs-md--1 text-600">
                                                            @item.Descripcion
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-4 p-3">
                                                <div class="row">
                                                  
                                                </div>
                                            </div>
                                        </div>
                                    }                                  
                                }
                            </CardBody>
                            <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
                                <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
                            </CardFooter>
                        </Card>

                    </div>
                </div>
            </div>
        </div>

        <!--Capacitacion End-->

        <!-- Footer Start -->
        <div class="container-fluid bg-simsa text-dark footer mt-5 pt-5  colornegro wow fadeIn" data-wow-delay="0.1s" id="contacto">
            <div class="container px-lg-5">
                <div class="copyright">
                    <div class="row">
                        <div class="col-md-6 col-lg-5">
                            <p>
                                <i class="fa fa-map-marker-alt mr-3 text-white"></i>C. Juan F. Brittingham, Cd Industrial, Torreón, Coah.
                            </p>
                            <p><i class="fa fa-phone-alt mr-3 text-white"></i>871 750 7171</p>
                            <p><i class="fa fa-envelope mr-3 text-white"></i>contacto@simsa.com</p>
                        </div>
                        <div class="col-md-3 text-center text-md-start mb-3 mb-md-0">
                            &copy; <span class="border-bottom">One Place</span>, All Right Reserved.<br />
                            Designed By <span class="border-bottom">Innovación</span>
                            <br>Distributed By: <span class="border-bottom">Simsa</span>
                        </div>
                        <div class="col-md-3 text-center text-md-end">
                            <div class="d-flex pt-2">
                                <a class="btn btn-outline-light btn-social" href="https://twitter.com/grupo_simsa" target="_blank"><i class="fab fa-twitter"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://es-la.facebook.com/GrupoSimsaMexico/" target="_blank"><i class="fab fa-facebook-f"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://www.instagram.com/migasolina/?hl=es" target="_blank"><i class="fab fa-instagram"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://www.linkedin.com/company/grupo-simsa-s-a-de-c-v-/" target="_blank"><i class="fab fa-linkedin-in"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End -->

        <!-- Back to Top -->
        <a href="#" class="btn btn-lg btn-lg-square btn-dark back-to-top pt-2"><i class="fas fa-long-arrow-alt-up"></i></a>
    </div>
}

@code {

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string
    public List<CapacitacionContinua> ListadeCapacitaciones { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    private bool Procesando = true;

    //incluir mas parametros si se requieren
    string capacitacionseleccionada = "0";

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        var url = navigationManager.Uri;//aqui aplicamos el diccionario de string
        var queries = navigationManager.ObtenerQueryStrings(url);
        //si es la primera vez que el usuario entra esto estaria a nulo
        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);//le pasamos un string vacio
        }
        else
        {
            queryStringsDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
            await RealizarBusqueda(queryStrings);
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar();
    }

    private async Task Cargar()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo("capacitacioninfoextra?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }

    #region Filtrar

    //este metodo me permite llenar los campos del formulario apartir del querystring
    private void LlenarCampos()
    {
        //toma los campos del diccionario y los coloca en los campos correspondientes
        if (queryStringsDict.ContainsKey("capacitacionid"))
        {
            capacitacionseleccionada = queryStringsDict["capacitacionid"];
        }
        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<CapacitacionContinua>>("api/Capacitacion/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        ListadeCapacitaciones = httpResponse.Response;
        Procesando = false;
    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["capacitacionid"] = capacitacionseleccionada;
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        capacitacionseleccionada = "";
        paginaActual = 1;
        await Cargar();
    }

    #endregion

    #region FiltroporCapacitacion

    private async Task<IEnumerable<CapacitacionContinua>> BuscarCapacitacion(string searchText)
    {
        var responseHttp = await repositorio.Get<List<CapacitacionContinua>>($"api/Capacitacion/buscar/{searchText}");
        return responseHttp.Response;
    }

    public CapacitacionContinua CapacitacionSeleccionada { get; set; }

    private void CargarCapacitacionFiltro(CapacitacionContinua item)
    {
        @if (item != null)
        {
            CapacitacionSeleccionada = item;
            capacitacionseleccionada = CapacitacionSeleccionada.CapacitacionContinuaId.ToString();
        }
    }

    #endregion

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("Animacion");
            firstRender = false;
            StateHasChanged();

            await JS.InvokeVoidAsync("BotonUP");
            firstRender = false;
            StateHasChanged();

            await JS.InvokeVoidAsync("Sticky");
            firstRender = false;
            StateHasChanged();
        }
    }

    #region ColapsarMenu

    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    void CollapseNavMenu()
    {
        collapseNavMenu = true;
    }

    #endregion
}
