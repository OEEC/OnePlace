@page "/indice-empleados"
@inject IRepositorio repositorio
@inject IMostrarMensaje mostrarMensajes
@inject NavigationManager navigationManager
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Administrador")]
@using System.Security.Claims

<Card Class="card">
    <CardHeader Class="card-header">
        <div class="row justify-content-between align-items-center">
            <div class="col-sm-auto">
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Texto Typo="Typo.h5" Class="mb-0">Empleados</Texto>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Enlace Class="btn btn-outline-dark btn-sm" Href="usuarios"><Icono Icon="fas fa-eye" data-fa-transform="shrink-3 down-2"></Icono><Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Usuarios</Texto></Enlace>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <BlazoredTypeahead SearchMethod="BuscarEmpleados"
                                           Context="empleado"
                                           TValue="Empleado"
                                           TItem="Empleado"
                                           ValueExpression="@(()=>EmpleadoSeleccionado)"
                                           Value="@EmpleadoSeleccionado"
                                           ValueChanged="@((Empleado item) => CargarEmpleadosFiltro(item))"
                                           placeholder="Buscar Empleados">
                            <SelectedTemplate>
                                @empleado.Persona.Nombre @empleado.Persona.ApePat @empleado.Persona.ApeMat
                            </SelectedTemplate>
                            <ResultTemplate>
                                @empleado.Persona.Nombre @empleado.Persona.ApePat @empleado.Persona.ApeMat
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Lo sentimos, no hay registros con esos datos.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <BlazoredTypeahead SearchMethod="BuscarDepartamentos"
                                           Context="depto"
                                           TValue="Departamento"
                                           TItem="Departamento"
                                           ValueExpression="@(()=>DepartamentoSeleccionado)"
                                           Value="@DepartamentoSeleccionado"
                                           ValueChanged="@((Departamento item) => CargarEmpleadosFiltro2(item))"
                                           placeholder="Buscar Departamentos">
                            <SelectedTemplate>
                                @depto.Departamento1
                            </SelectedTemplate>
                            <ResultTemplate>
                                @depto.Departamento1
                            </ResultTemplate>
                            <NotFoundTemplate>
                                Lo sentimos, no hay registros con esos datos.
                            </NotFoundTemplate>
                        </BlazoredTypeahead>
                    </div>
                </div>
                <div class="d-inline-block mr-3">
                    <div class="input-group input-group-sm d-flex align-items-center">
                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-dark btn-sm" @onclick="Cargar">
                            <Icono Icon="oi oi-magnifying-glass" data-fa-transform="shrink-3 down-2" />
                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Filtrar</Texto>
                        </Boton>
                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-danger btn-sm" @onclick="LimpiarOnClick">
                            <Icono Icon="oi oi-reload" data-fa-transform="shrink-3 down-2" />
                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Limpiar</Texto>
                        </Boton>
                    </div>
                </div>
            </div>
        </div>
    </CardHeader>
    <CardBody Class="card-body p-0">
        <ListadoGenerico Listado="Empleados">
            <HayRegistrosCompleto>
                <div class="row no-gutters text-center fs--1">
                    @foreach (var item in Empleados)
                    {
                        @if (item.Persona != null)
                        {
                            <CardPerfil Nombre="@(item.Persona.Nombre+" "+item.Persona.ApePat)" UrlDetalles="detalles-empleado" Id="@item.Idempleado" Imagen="@item.Img" VerDetalles="true" VerEditar="false" />
                        }
                    }
                </div>
            </HayRegistrosCompleto>
        </ListadoGenerico>
    </CardBody>
    <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
        <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales"></Paginacion>
    </CardFooter>
</Card>

@code {

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string
    public List<Empleado> Empleados { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    //incluir mas parametros si se requieren
    string empleadoseleccionado = "0";
    string departamentoseleccionado = "0";
    private bool Activo = false;

    #region CargarEmpleados
    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        var url = navigationManager.Uri;//aqui aplicamos el diccionario de string
        var queries = navigationManager.ObtenerQueryStrings(url);
        //si es la primera vez que el usuario entra esto estaria a nulo
        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);//le pasamos un string vacio
        }
        else
        {
            queryStringsDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
            await RealizarBusqueda(queryStrings);
        }
    }

    private async Task paginaSeleccionada(int pagina)
    {
        //la pagina actual va hacer igual a la pagina que me envie el componente
        paginaActual = pagina;
        await Cargar();
    }

    private async Task Cargar()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo("indice-empleados?" + queryStrings);
        await RealizarBusqueda(queryStrings);
    }
    #endregion CargarEmpleados

    #region Filtrar

    //este metodo me permite llenar los campos del formulario apartir del querystring
    private void LlenarCampos()
    {
        //toma los campos del diccionario y los coloca en los campos correspondientes
        if (queryStringsDict.ContainsKey("empleadoid"))
        {
            empleadoseleccionado = queryStringsDict["empleadoid"];
        }
        if (queryStringsDict.ContainsKey("departamentoid"))
        {
            departamentoseleccionado = queryStringsDict["departamentoid"];
        }
        if (queryStringsDict.ContainsKey("activo"))
        {
            bool.TryParse(queryStringsDict["activo"], out Activo);
        }
        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Empleado>>("api/Empleado/filtrar?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        Empleados = httpResponse.Response;
    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["empleadoid"] = empleadoseleccionado;
        queryStringsDict["departamentoid"] = departamentoseleccionado;
        queryStringsDict["activo"] = Activo.ToString();
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        empleadoseleccionado = "0";
        departamentoseleccionado = "0";
        Activo = false;
        paginaActual = 1;
        await Cargar();
    }

    #endregion

    #region FiltroporEmpleado

    public Empleado EmpleadoSeleccionado { get; set; }

    private async Task<IEnumerable<Empleado>> BuscarEmpleados(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Empleado>>($"api/Empleado/buscar/{searchText}");
        return responseHttp.Response;
    }

    private void CargarEmpleadosFiltro(Empleado item)
    {
        @if (item != null)
        {
            EmpleadoSeleccionado = item;
            empleadoseleccionado = EmpleadoSeleccionado.Idempleado.ToString();
        }
    }

    #endregion

    #region FiltroporDepartamento

    public Departamento DepartamentoSeleccionado { get; set; }

    private async Task<IEnumerable<Departamento>> BuscarDepartamentos(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Departamento>>($"api/Departamento/buscar/{searchText}");
        return responseHttp.Response;
    }

    private void CargarEmpleadosFiltro2(Departamento item)
    {
        @if (item != null)
        {
            DepartamentoSeleccionado = item;
            departamentoseleccionado = DepartamentoSeleccionado.Iddepartamento.ToString();
        }
    }

    #endregion
}

