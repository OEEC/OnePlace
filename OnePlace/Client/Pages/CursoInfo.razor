@page "/cursoinfoextra/{CursoId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@*todas las paginas necesitan este atributo para que no se puedan ver sino estas logueado*@
@attribute [Authorize]
@using System.Security.Claims

@if (user.IsInRole("Usuario"))
{
    <div class="container-landingpage bg-white p-0 text-heebo">

        <!-- Navbar & Hero Start -->
        <div class="container-xxl position-relative p-0">
            <nav class="navbar navbar-expand-lg navbar-light px-4 px-lg-5 py-3 py-lg-0">
                <a href="inicio" class="navbar-brand p-0">
                    <!--<h1 class="m-0"><i class="fa fa-search me-2"></i>SEO<span class="fs-5">Master</span></h1> -->
                    <img src="img/oneplace.png" alt="Logo">
                </a>
                <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
                    <span class="fa fa-bars"></span>
                </button>
                <div class="@NavMenuCssClass navbar-collapse" id="navbarCollapse" @onclick="CollapseNavMenu">
                    <div class="navbar-nav ml-auto py-0">
                        @*cambio ocurrido plantilla en boostrap 5 ms-auto blazor boostrap 4 ml-auto*@
                        <a onclick="document.getElementById('inicio').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Inicio</a>
                        <a onclick="document.getElementById('cursos').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Cursos</a>
                        <a onclick="document.getElementById('contacto').scrollIntoView({ behavior: 'smooth' })" class="nav-item nav-link">Contacto</a>
                    </div>
                    <EnlacesLogin ColorDropDown="btn btn-simsasecondary btn-sm ml-2 dropdown-caret-none" />
                </div>
            </nav>

            <div class="container-xxl py-5 bg-simsa hero-header mb-5" id="inicio">
                <div class="container my-5 py-5 px-lg-5">
                    <div class="row g-5 py-5">
                        <div class="col-lg-6 text-center text-lg-start">
                            <h1 class="text-white mb-4 animated zoomIn">Gracias por ser parte de la familia Simsa</h1>
                            <p class="text-white pb-3 animated zoomIn">Bienvenido a tu Portal Web</p>
                            <a href="inicio" class="btn btn-light py-sm-3 px-sm-5 rounded-pill me-3 animated slideInLeft font-weight-bold">Página Principal</a>
                            <!--<a href="" class="btn btn-outline-light py-sm-3 px-sm-5 rounded-pill animated slideInRight">Contact Us</a> -->
                        </div>
                        <div class="col-lg-6 text-center text-lg-start">
                            <img class="img-fluid animated flipInX" src="img/oneplace2.png" alt="">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Navbar & Hero End -->

        <!--Cursos-->

        <div class="container-xxl py-5" id="cursos">
            <div class="container px-lg-5">
                <div class="row g-5">
                    <div class="col-lg-12 wow fadeInUp" data-wow-delay="0.1s" data-wow-iteration="1" style="visibility: visible; animation-delay: 0.1s; animation-name: fadeInUp;">
                        <div class="section-title position-relative mb-4 pb-2">
                            <h6 class="position-relative text-primarysimsa pl-4">Cursos</h6>
                            <h2 class="mt-2">Aprende y desarrolla nuevas habilidades</h2>
                        </div>
                        @if (Curso == null)
                        {
                            <LoadingSpinner IsLoading="Procesando" />
                        }
                        else
                        {
                            <Card Class="card mb-3">
                                <CardMedia Class="bg-holder d-none d-lg-block bg-card" Image="Img/corner-4.png"></CardMedia>
                                <CardBody Class="card-body position-relative">
                                    <div class="row">
                                        <div class="col-lg-8">
                                            <Texto Typo="Typo.h3">@Curso.Nombre</Texto>
                                            <Texto Typo="Typo.body2" Class="mt-2">
                                                @Curso.Descripcion
                                            </Texto>                                           
                                        </div>
                                    </div>
                                </CardBody>
                            </Card>

                            @if (ListadeTemas != null)
                            {
                                <Card Class="card mb-3">
                                    <CardHeader Class="card-header bg-light">
                                        <div class="row justify-content-between align-items-center">
                                            <div class="col-sm-auto">
                                                <div class="d-inline-block mr-3">
                                                    <div class="input-group input-group-sm d-flex align-items-center">
                                                        <Texto Typo="Typo.h5" Class="mb-0">Temas</Texto>
                                                    </div>
                                                </div>
                                                <div class="d-inline-block mr-3">
                                                    <div class="input-group input-group-sm d-flex align-items-center">
                                                        <BlazoredTypeahead SearchMethod="BuscarTemas"
                                                                           Context="tema"
                                                                           TValue="Tema"
                                                                           TItem="Tema"
                                                                           ValueExpression="@(()=>TemaSeleccionado)"
                                                                           Value="@TemaSeleccionado"
                                                                           ValueChanged="@((Tema item) => CargarTemasFiltro(item))"
                                                                           placeholder="Buscar Tema">
                                                            <SelectedTemplate>
                                                                @tema.Nombre
                                                            </SelectedTemplate>
                                                            <ResultTemplate>
                                                                @tema.Nombre
                                                            </ResultTemplate>
                                                            <NotFoundTemplate>
                                                                Lo sentimos, no hay estados con esos datos.
                                                            </NotFoundTemplate>
                                                        </BlazoredTypeahead>
                                                    </div>
                                                </div>                                             
                                                <div class="d-inline-block mr-3">
                                                    <div class="input-group input-group-sm d-flex align-items-center">
                                                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-dark btn-sm" @onclick="CargarTemas">
                                                            <Icono Icon="oi oi-magnifying-glass" data-fa-transform="shrink-3 down-2" />
                                                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Filtrar</Texto>
                                                        </Boton>
                                                        <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-danger btn-sm" @onclick="LimpiarOnClick">
                                                            <Icono Icon="oi oi-reload" data-fa-transform="shrink-3 down-2" />
                                                            <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Limpiar</Texto>
                                                        </Boton>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </CardHeader>
                                    <CardBody Class="card-body border-top">
                                        <div class="row light">
                                            @foreach (var item in ListadeTemas)
                                            {
                                                <div class="col-sm-6 col-lg-4 mb-4">
                                                    <Card Class="card overflow-hidden zoom" Style="width: 20rem; height: 370px;">
                                                        <Card Class="card-img-top">
                                                            <Enlace Class="manita" Href="@("temainfoextra/"+item.TemaId)">
                                                                <Imagen Class="img-fluidcustom" Src="@item.Imagen" alt="Card image cap" />
                                                            </Enlace>
                                                        </Card>
                                                        <CardBody Class="card-body">
                                                            <Texto Typo="Typo.h5" Class="card-title">@item.NombreCortado</Texto>
                                                            <Texto Typo="Typo.body2" Class="card-text">
                                                                @item.DescripcionCortada
                                                            </Texto>                                                           
                                                        </CardBody>
                                                    </Card>
                                                </div>
                                            }
                                        </div>
                                    </CardBody>
                                    <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
                                        <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
                                    </CardFooter>
                                </Card>
                                <br />
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <!--Cursos End-->

        <!-- Footer Start -->
        <div class="container-fluid bg-simsa text-dark footer mt-5 pt-5  colornegro wow fadeIn" data-wow-delay="0.1s" id="contacto">
            <div class="container px-lg-5">
                <div class="copyright">
                    <div class="row">
                        <div class="col-md-6 col-lg-5">
                            <p>
                                <i class="fa fa-map-marker-alt mr-3 text-white"></i>C. Juan F. Brittingham, Cd Industrial, Torreón, Coah.
                            </p>
                            <p><i class="fa fa-phone-alt mr-3 text-white"></i>871 750 7171</p>
                            <p><i class="fa fa-envelope mr-3 text-white"></i>contacto@simsa.com</p>
                        </div>
                        <div class="col-md-3 text-center text-md-start mb-3 mb-md-0">
                            &copy; <span class="border-bottom">One Place</span>, All Right Reserved.<br />
                            Designed By <span class="border-bottom">Innovación</span>
                            <br>Distributed By: <span class="border-bottom">Simsa</span>
                        </div>
                        <div class="col-md-3 text-center text-md-end">
                            <div class="d-flex pt-2">
                                <a class="btn btn-outline-light btn-social" href="https://twitter.com/grupo_simsa" target="_blank"><i class="fab fa-twitter"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://es-la.facebook.com/GrupoSimsaMexico/" target="_blank"><i class="fab fa-facebook-f"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://www.instagram.com/migasolina/?hl=es" target="_blank"><i class="fab fa-instagram"></i></a>
                                <a class="btn btn-outline-light btn-social" href="https://www.linkedin.com/company/grupo-simsa-s-a-de-c-v-/" target="_blank"><i class="fab fa-linkedin-in"></i></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End -->

        <!-- Back to Top -->
        <a href="#" class="btn btn-lg btn-lg-square btn-dark back-to-top pt-2"><i class="fas fa-long-arrow-alt-up"></i></a>
    </div>
}

@code {

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter] public App MyApp { get; set; }

    [Parameter] public int CursoId { get; set; }
    private Curso Curso;
    private bool Procesando = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        @if (user.IsInRole("Usuario"))
        {
            //cambiar el diseño dependiendo del rol del usuario logueado
            MyApp.SetLayout(typeof(UserLayout));
            await JS.InvokeVoidAsync("loadCss", "css/Landingpagestyle.css");
            StateHasChanged();

            var url = navigationManager.Uri;//aqui aplicamos el diccionario de string
            var queries = navigationManager.ObtenerQueryStrings(url);
            //si es la primera vez que el usuario entra esto estaria a nulo
            if (queries == null)
            {
                await RealizarBusqueda(string.Empty);//le pasamos un string vacio
            }
            else
            {
                queryStringsDict = queries;
                LlenarCampos();
                var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
                await RealizarBusqueda(queryStrings);
            }

            await Cargar();
        }
        else
        {
            MyApp.SetLayout(typeof(MainLayout));
        }

        await CargarActividadesTerminadas();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<Curso>($"api/Curso/{CursoId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Curso = responseHttp.Response;
            Procesando = false;
        }
    }

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string
    public List<Tema> ListadeTemas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    //incluir mas parametros si se requieren
    string temaseleccionado = "0";
    private bool Activo = false;

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarTemas();
    }

    private async Task CargarTemas()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo($"cursoinfoextra/{CursoId}?" + queryStrings);
        await RealizarBusqueda(queryStrings);
        Procesando = false;
    }

    #region Filtrar

    //este metodo me permite llenar los campos del formulario apartir del querystring
    private void LlenarCampos()
    {
        //toma los campos del diccionario y los coloca en los campos correspondientes
        if (queryStringsDict.ContainsKey("temaid"))
        {
            temaseleccionado = queryStringsDict["temaid"];
        }
        if (queryStringsDict.ContainsKey("activo"))
        {
            bool.TryParse(queryStringsDict["activo"], out Activo);
        }
        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Tema>>($"api/Tema/filtrar/{CursoId}?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        ListadeTemas = httpResponse.Response;
    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["temaid"] = temaseleccionado;
        queryStringsDict["activo"] = Activo.ToString();
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        temaseleccionado = "0";
        Activo = false;
        paginaActual = 1;
        await CargarTemas();
    }

    #endregion   

    #region FiltroporTemas

    private async Task<IEnumerable<Tema>> BuscarTemas(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Tema>>($"api/Tema/buscar/{searchText}");
        return responseHttp.Response;
    }

    public Tema TemaSeleccionado { get; set; }

    private void CargarTemasFiltro(Tema item)
    {
        @if (item != null)
        {
            TemaSeleccionado = item;
            temaseleccionado = TemaSeleccionado.TemaId.ToString();
        }
    }

    #endregion   

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("Animacion");
            firstRender = false;
            StateHasChanged();

            await JS.InvokeVoidAsync("BotonUP");
            firstRender = false;
            StateHasChanged();

            await JS.InvokeVoidAsync("Sticky");
            firstRender = false;
            StateHasChanged();
        }
    }

    #region ColapsarMenu

    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    void CollapseNavMenu()
    {
        collapseNavMenu = true;
    }

    #endregion

    #region MonitorearFasesCompletadas

    ActividadesFasesTerminadasDTO ActividadesFasesTerminadasDTO = new ActividadesFasesTerminadasDTO();
    public ActividadUsuario Actividad = new ActividadUsuario();

    private async Task CargarActividadesTerminadas()
    {
        //se revisara cada que se entre al modulo de cursos, si ya se completaron las 3 fases de los temas del curso
        var responseHttp = await repositorio.Get<ActividadesFasesTerminadasDTO>($"api/Quiz/ListadeActividadesTerminadas/{CursoId}");
        if (!responseHttp.Error)
        {
            ActividadesFasesTerminadasDTO = responseHttp.Response;
        }

        //con la bandera resivida desde el backend indicamos si se termino todas las fases del curso, sino entonces pasamos a ejecutar el siguente codigo
        if (ActividadesFasesTerminadasDTO.Terminado != true)
        {
            //si ya se completaron las fases entonces se agregara a cada tema la ultima fase para asi obtener el certificado del curso
            if (ActividadesFasesTerminadasDTO.ListadeActiviades.Count == 3)
            {
                //le pasamos un nuevo objeto de tipo actividad, la cual se registrara en la base de datos e indica que todas las fases terminaron
                Actividad.IsComplete = true;
                Actividad.FaseCursoId = 4;

                var httpResponse2 = await repositorio.Post($"api/Quiz/TerminarFases/{CursoId}", Actividad);
                if (httpResponse2.Error)
                {
                    await mostrarMensajes.MostrarMensajeError(await httpResponse2.GetBody());
                }
                else
                {
                    navigationManager.NavigateTo($"cursoinfoextra/{CursoId}");
                }
            }
        }
    }

    #endregion
}
