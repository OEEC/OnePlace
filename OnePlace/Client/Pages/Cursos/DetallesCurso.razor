@page "/detalles-curso/{CursoId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensaje mostrarMensajes
@inject IJSRuntime JS
@using System.Security.Claims

@if (Curso == null)
{
    <LoadingSpinner IsLoading="Procesando" />
}
else
{
    <Card Class="card mb-3">
        <CardMedia Class="bg-holder d-none d-lg-block bg-card" Image="Img/corner-4.png"></CardMedia>
        <CardBody Class="card-body position-relative">
            <div class="row">
                <div class="col-lg-8">
                    <Texto Typo="Typo.h3">@Curso.Nombre</Texto>
                    <Texto Typo="Typo.body2" Class="mt-2">
                        @Curso.Descripcion
                    </Texto>
                    @if (user.IsInRole("Administrador"))
                    {
                        <Enlace Class="btn btn-dark btn-sm mr-1 mb-1" type="button" Href="@("crear-temas/"+Curso.CursoId)">
                            <Texto Typo="Typo.normal" Class="fas fa-plus mr-1" data-fa-transform="shrink-3"></Texto>Añadir Tema
                        </Enlace>
                    }
                </div>
            </div>
        </CardBody>
    </Card>
}

@if (ListadeTemas != null)
{
    <Card Class="card mb-3">
        <CardHeader Class="card-header bg-light">
            <div class="row justify-content-between align-items-center">
                <div class="col-sm-auto">
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <Texto Typo="Typo.h5" Class="mb-0">Temas</Texto>
                        </div>
                    </div>
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <BlazoredTypeahead SearchMethod="BuscarTemas"
                                               Context="tema"
                                               TValue="Tema"
                                               TItem="Tema"
                                               ValueExpression="@(()=>TemaSeleccionado)"
                                               Value="@TemaSeleccionado"
                                               ValueChanged="@((Tema item) => CargarTemasFiltro(item))"
                                               placeholder="Buscar Tema">
                                <SelectedTemplate>
                                    @tema.Nombre
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @tema.Nombre
                                </ResultTemplate>
                                <NotFoundTemplate>
                                    Lo sentimos, no hay estados con esos datos.
                                </NotFoundTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            @if (user.IsInRole("Administrador"))
                            {
                                <div class="custom-control custom-switch">
                                    <input class="custom-control-input" id="customSwitch1" type="checkbox" @onchange="e => CheckChanged(e)" checked="@Activo">
                                    <label class="custom-control-label" for="customSwitch1">Inactivos</label>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="d-inline-block mr-3">
                        <div class="input-group input-group-sm d-flex align-items-center">
                            <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-dark btn-sm" @onclick="CargarTemas">
                                <Icono Icon="oi oi-magnifying-glass" data-fa-transform="shrink-3 down-2" />
                                <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Filtrar</Texto>
                            </Boton>
                            <Boton ButtonType="ButtonType.Button" Class="btn btn-outline-danger btn-sm" @onclick="LimpiarOnClick">
                                <Icono Icon="oi oi-reload" data-fa-transform="shrink-3 down-2" />
                                <Texto Typo="Typo.normal" Class="d-none d-sm-inline-block ml-1">Limpiar</Texto>
                            </Boton>
                        </div>
                    </div>
                </div>
            </div>
        </CardHeader>
        <CardBody Class="card-body border-top">
            <div class="row light">
                @foreach (var item in ListadeTemas)
                {
                    <div class="col-sm-6 col-lg-4 mb-4">
                        <Card Class="card overflow-hidden" Style="width: 20rem; height: 370px;">
                            <Card Class="card-img-top">
                                <Enlace Class="manita" Href="@("detalles-tema/"+item.TemaId)">
                                    <Imagen Class="img-fluidcustom" Src="@item.Imagen" alt="Card image cap" />
                                </Enlace>
                            </Card>
                            <CardBody Class="card-body">
                                <Texto Typo="Typo.h5" Class="card-title">@item.NombreCortado</Texto>
                                <Texto Typo="Typo.body2" Class="card-text">
                                    @item.DescripcionCortada
                                </Texto>
                                @if (user.IsInRole("Administrador"))
                                {
                                    <Enlace Class="btn p-0" Href="@("editar-tema/" + item.TemaId + "/" + true)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
                                        <Icono Icon="text-500 fas fa-edit" />
                                    </Enlace>
                                    <BotonIcono Class="btn p-0 ms-2" ButtonType="ButtonType.Button" data-bs-toggle="tooltip" data-bs-placement="top" title="Borrar" Icon="text-500 fas fa-trash-alt" @onclick="@(() => Desactivar(item))" />
                                }
                            </CardBody>
                        </Card>
                    </div>
                }
            </div>
        </CardBody>
        <CardFooter Class="card-footer border-top d-flex justify-content-center bg-transparent">
            <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada" PaginasTotales="paginasTotales" />
        </CardFooter>
    </Card>
    <br />
}

@code {

    ClaimsPrincipal user;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter] public int CursoId { get; set; }
    private bool Procesando = true;

    private Curso Curso;

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        user = authState.User;

        var url = navigationManager.Uri;//aqui aplicamos el diccionario de string
        var queries = navigationManager.ObtenerQueryStrings(url);
        //si es la primera vez que el usuario entra esto estaria a nulo
        if (queries == null)
        {
            await RealizarBusqueda(string.Empty);//le pasamos un string vacio
        }
        else
        {
            queryStringsDict = queries;
            LlenarCampos();
            var queryStrings = url.Split(new string[] { "?" }, StringSplitOptions.None)[1];//obtenemos los querystring atravez de la url
            await RealizarBusqueda(queryStrings);
        }

        await Cargar();
    }

    private async Task Cargar()
    {
        var responseHttp = await repositorio.Get<Curso>($"api/Curso/{CursoId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Curso = responseHttp.Response;
            Procesando = false;
        }
    }

    Dictionary<string, string> queryStringsDict = new Dictionary<string, string>(); //creamos un diccionario de string
    public List<Tema> ListadeTemas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    //incluir mas parametros si se requieren
    string temaseleccionado = "0";
    private bool Activo = false;

    private async Task paginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarTemas();
    }

    private async Task CargarTemas()
    {
        var queryStrings = GenerarQueryString();
        navigationManager.NavigateTo($"detalles-curso/{CursoId}?" + queryStrings);
        await RealizarBusqueda(queryStrings);
        Procesando = false;
    }

    #region Filtrar

    //este metodo me permite llenar los campos del formulario apartir del querystring
    private void LlenarCampos()
    {
        //toma los campos del diccionario y los coloca en los campos correspondientes
        if (queryStringsDict.ContainsKey("temaid"))
        {
            temaseleccionado = queryStringsDict["temaid"];
        }
        if (queryStringsDict.ContainsKey("activo"))
        {
            bool.TryParse(queryStringsDict["activo"], out Activo);
        }
        if (queryStringsDict.ContainsKey("pagina"))
        {
            int.TryParse(queryStringsDict["pagina"], out paginaActual);
        }
    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var httpResponse = await repositorio.Get<List<Tema>>($"api/Tema/filtrar/{CursoId}?" + queryStrings);
        paginasTotales = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        ListadeTemas = httpResponse.Response;
    }

    private string GenerarQueryString()
    {
        //si el diccionario es nulo, no hacer nada si no es nulo lo inicializaos
        if (queryStringsDict == null) { queryStringsDict = new Dictionary<string, string>(); }
        queryStringsDict["temaid"] = temaseleccionado;
        queryStringsDict["activo"] = Activo.ToString();
        queryStringsDict["pagina"] = paginaActual.ToString();

        //quitamos de la representacion en querystring si alguno de los valores es el valor por defecto ejemplo titulo vacio o num 0
        var valoresporDefecto = new List<string>() { "false", "", "0" };

        //construir ruta para compartir categoria=7&titulo=lenovo...
        //en el where exluimos los valores por defecto
        //en select le pasamos la llave y el valor y con encode codificamos el valor como por ejemplo espacion en blanco y evitar inyeccion sql
        return string.Join("&", queryStringsDict
            .Where(x => !valoresporDefecto.Contains(x.Value.ToLower()))
            .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray());
    }

    private async Task LimpiarOnClick()
    {
        temaseleccionado = "0";
        Activo = false;
        paginaActual = 1;
        await CargarTemas();
    }

    #endregion

    #region FiltroActivos

    private void CheckChanged(ChangeEventArgs ev)
    {
        Activo = (Boolean)ev.Value;
    }

    #endregion

    #region FiltroporTemas

    private async Task<IEnumerable<Tema>> BuscarTemas(string searchText)
    {
        var responseHttp = await repositorio.Get<List<Tema>>($"api/Tema/buscar/{searchText}");
        return responseHttp.Response;
    }

    public Tema TemaSeleccionado { get; set; }

    private void CargarTemasFiltro(Tema item)
    {
        @if (item != null)
        {
            TemaSeleccionado = item;
            temaseleccionado = TemaSeleccionado.TemaId.ToString();
        }
    }

    #endregion

    #region BorrarTema
    public async Task Desactivar(Tema tema)
    {       
        string mensajeconfirmacion = $"¿Desea borrar este tema: {tema.Nombre}?";
        var confirmado = await JS.Confirm("Confirmar", mensajeconfirmacion, IJSRuntimeExtensionMethods.TipoMensajeSweetAlert.question);
        if (confirmado)
        {
            tema.Activo = false;
            var httpResponse = await repositorio.Put("api/Tema/DesactivarTemaQuiz", tema);
            if (httpResponse.Error)
            {
                await mostrarMensajes.MostrarMensajeError(await httpResponse.GetBody());
            }
            else
            {
                navigationManager.NavigateTo($"detalles-curso/{tema.CursoId}");
                await Cargar();
                await CargarTemas();
            }
        }
    }
    #endregion
}
